#!/bin/bash

# Function: replace_params_and_run
# It replaces the parameters in your input files, submits the job, waits for a node to be assigned, and prints out a message with the job details.
replace_params_and_run() {
    # check wheter flare is active or not
    lflare=".true."
    vflare=$1
    [[ $1 == 'no' ]] && lflare=".false." && vflare=0.0


    starttime=$(date +%s)
    startdtime=$(date -d "@$starttime" +"%Y%m%d_%H%M%S")
    outputnameJson="$3"   
    outputname3d="3D_$startdtime"
    outputnameM="$startdtime"    


    # Replace the parameters in the input files
    sed -i \
        -e "s/^\( *flare_emission *\)= *[^ ]*/\1= $vflare/" \
        -e "s/^\( *dnap_init *\)= *[^ ]*/\1= $2/" \
        -e "s/^\( *lflare *\)= *[^ ]*/\1= $lflare/" \
        -e "s/^\( *outputname *\)= *[^ ]*/\1= $outputname3d/" \
        -e "s/^\( *stationlist_tot *\)= *[^ ]*/\1= $outputnameM/" \
        "INPUT_ORG_$DOMAIN"

    sed -i "/stationlist_tot/ s/'.*'/'$outputnameM'/g" INPUT_DIA

    # Submit the job
    job_id=$(sbatch --parsable $RUN_SCRIPT $DOMAIN)
    # Wait for a node to be assigned
    nodeX=$(wait_for_node "$job_id")

    # Construct and print out the job details
    echo "job id $job_id  starts at $startdtime  on node $nodeX  with parameter:  FE = $1   BINP = $2   files = $outputname3d"

    # Call the function with the input Fortran namelist file and desired JSON output file
    add_metadata_to_json "$starttime" "$job_id" "$nodeX" "$outputnameJson"
    
    # wait for INPUT* files to be read
    sleep 20
}

# Function: wait_for_node
# Checks if a node has been assigned to a job. If not, it waits for 1 second and checks again.
wait_for_node() {
    nodeX=$(squeue -j "$1" -o "%N" | tail -n +2)
    while ! [[ $nodeX =~ ^l[0-9]{5}$ ]]; do
        sleep 4
        nodeX=$(squeue -j "$1" -o "%N" | tail -n +2)
    done
    echo $nodeX
}

# Processes an input FORTRAN namelist, extracts its content, and appends it
# to an existing JSON file as a new "run entry". Namelist variables are organized
# under their respective sections and converted into JSON format.
add_metadata_to_json() {
    local input_files=("INPUT_ORG_$DOMAIN" "INPUT_DIA" "INPUT_IO_$DOMAIN" "INPUT_ASS" "INPUT_DYN_$DOMAIN" "INPUT_IDEAL" "INPUT_PHY")
    local starttime="$1"
    local startdtime=$(date -d "@$starttime" +"%Y%m%d_%H%M%S")
    local output_json="$4"
    local json_output=""
    
    sed -i '$ d' "$output_json"
    echo -e ",\n  \"$startdtime\": {" >> "$output_json"
    echo -e "    \"starttime\": \"$starttime\"," >> "$output_json"
    echo -e "    \"job_id\": \"$2\",\n    \"nodeX\": \"$3\",\n    \"domain\": \"$DOMAIN\"," >> "$output_json"

    for input_file in "${input_files[@]}"; do
        while IFS= read -r line; do
            [[ -z "$line" || ${line} =~ ^[[:space:]]*! ]] && continue
            [[ "$line" =~ ^[[:space:]]*\& ]] && current_section="${line//[& ]/}" && continue
            [[ "$line" =~ \/END ]] && current_section="" && continue
            
            if [[ -n "$current_section" ]]; then
                line=${line%,}
                IFS=',' read -ra assignments <<< "$line"
                for assignment in "${assignments[@]}"; do
                    key=$(echo "$assignment" | cut -d'=' -f1 | xargs)
                    value=$(echo "$assignment" | cut -d'=' -f2 | xargs)
                    json_output+="    \"$current_section.$key\": \"$value\",\n"
                done
            fi
        done < "$input_file"
    done

    json_output=${json_output%,}
    json_output+="  }\n}"

    echo -e "$json_output" >> "$output_json"
}



#
################# MAIN ###################
#
startdtime=$(date +%Y%m%d_%H%M%S)

# Define constants
RUN_SCRIPT=run_COSMO-SPECS_levante

#DOMAIN="12x12"
DOMAIN="42x32"
#DOMAIN="122x112"

flare_emission_values=("no" "8e7" "8e8" "8e9")
background_inp_values=("10" "100" "1000")

# initialize metadata file
outputnameJson="cs-eriswil__$startdtime.json"
touch "$outputnameJson"
echo -e "{\n" >> "$outputnameJson"
echo -e "," >> "$outputnameJson"

# Print out some initial information
echo -e "\nsubmit jobs and wait unitl a node is assigned to read the INPUT* files"
echo -e "ensemble run date: $startdtime UTC"


# Loop over the different parameter combinations
for background_inp in "${background_inp_values[@]}"; do
    for flare_emission in "${flare_emission_values[@]}"; do
        # Call replace_params_and_run for each combination of parameters
        replace_params_and_run "$flare_emission" "$background_inp" "$outputnameJson"
    done
done