#!/bin/bash

# Function: replace_params_and_run
# It replaces the parameters in your input files, submits the job, waits for a node to be assigned, and prints out a message with the job details.
replace_params_and_run() {
    # check wheter flare is active or not
    lflare=".true."
    vflare=$1
    [[ $1 == 'no' ]] && lflare=".false." && vflare=0.0

    starttime=$(date +%s)
    startdtime=$(date -d "@$starttime" +"%Y%m%d_%H%M%S")
    outputname3d="3D_$startdtime"
    outputnameM="$startdtime"    

    # Replace the parameters in the input files
    sed -i \
        -e "s/^\( *flare_emission *\)= *[^ ]*/\1= $vflare/" \
        -e "s/^\( *dnap_init *\)= *[^ ]*/\1= $2/" \
        -e "s/^\( *lflare *\)= *[^ ]*/\1= $lflare/" \
        -e "s/^\( *outputname *\)= *[^ ]*/\1= $outputname3d/" \
        "INPUT_ORG_$DOMAIN"

    sed -E -i "s/[0-9]{8}_[0-9]{6}/$outputnameM/g" "INPUT_DIA"

    # Submit the job
    job_id=$(sbatch --parsable $RUN_SCRIPT $DOMAIN)
    # Wait for a node to be assigned
    nodeX=$(wait_for_node "$job_id")

    # Construct and print out the job details
    echo "job id $job_id  starts at $startdtime  on node $nodeX  with parameter:  FE = $1   BINP = $2   files = $outputname3d"

    # Call the function with the input Fortran namelist file and desired JSON output file
    append_to_json "$starttime" "$job_id" "$nodeX"
    
    # add files to copy
    append_to_file "$job_id" "$startdtime"
    
    # wait for INPUT* files to be read
    sleep 20
}

# Function: wait_for_node
# Checks if a node has been assigned to a job. If not, it waits for 1 second and checks again.
wait_for_node() {
    nodeX=$(squeue -j "$1" -o "%N" | tail -n +2)
    while ! [[ $nodeX =~ ^l[0-9]{5}$ ]]; do
        sleep 4
        nodeX=$(squeue -j "$1" -o "%N" | tail -n +2)
    done
    echo $nodeX
}

# Processes an input FORTRAN namelist, extracts its content, and appends it
# to an existing JSON file as a new "run entry". Namelist variables are organized
# under their respective sections and converted into JSON format.
append_to_json() {
    local input_files=("INPUT_ORG_$DOMAIN" "INPUT_DIA" "INPUT_IO_$DOMAIN" "INPUT_ASS" "INPUT_DYN_$DOMAIN" "INPUT_IDEAL" "INPUT_PHY")
    local starttime="$1"
    local startdtime=$(date -d "@$starttime" +"%Y%m%d_%H%M%S")
    
    sed -i '$ d' "$JSON_FILE"
    echo -e ",\n  \"$startdtime\": {" >> "$JSON_FILE"
    echo -e "    \"starttime\": \"$starttime\"," >> "$JSON_FILE"
    echo -e "    \"job_id\": \"$2\",\n    \"nodeX\": \"$3\",\n    \"domain\": \"$DOMAIN\",\n" >> "$JSON_FILE"

    # Assuming the namelists are plain text files
    for input_file in "${input_files[@]}"; do
        json_content=$(python3 python/namelist_converter.py "$RUN_SCRIPT_DIR/$input_file")
        echo -e "    \"$input_file\": $json_content," >> "$JSON_FILE"
    done

    # Remove the last comma in the file
    tac "$JSON_FILE" | awk '!p && sub(/,$/, "") {p=1} 1' | tac > temp.txt && mv temp.txt "$JSON_FILE"
    # Finalize the JSON (add closing brackets)
    echo "}}}" >> "$JSON_FILE"
}

# Function appends bash commands to a file
append_to_file() {
    local files_to_copy=("M_*-$2.nc" "3D_$2.nc" "$1.out" "$1.err")  # List of files to copy
    for file in "${files_to_copy[@]}"; do
        echo -e "mv $RUN_SCRIPT_DIR/$file ${JSON_FILE%.json}/" >> "$COPY_FILE"
    done
}


#
################# MAIN ###################
#
startdtime=$(date +%Y%m%d_%H%M%S)

# Define constants
RUN_SCRIPT=run_COSMO-SPECS_levante
RUN_SCRIPT_DIR=$(pwd)

#DOMAIN="12x12"
DOMAIN="42x32"
#DOMAIN="122x112"

flare_emission_values=("no" "8e7")
background_inp_values=("10")

# initialize metadata file
JSON_FILE="cs-eriswil__$startdtime.json"
touch "$JSON_FILE"
echo -e "{\n" >> "$JSON_FILE"
echo -e "," >> "$JSON_FILE"

# initialize copy file
COPY_FILE="copy2_${JSON_FILE%.json}.sh"
touch "$COPY_FILE"
chmod +x "$COPY_FILE"
echo -e 'echo "mkdir ${JSON_FILE%.json}"' >> "$COPY_FILE"
echo -e 'mkdir -p ${JSON_FILE%.json}' >> "$COPY_FILE"
echo -e "mv $RUN_SCRIPT_DIR/$JSON_FILE ${JSON_FILE%.json}/" >> "$COPY_FILE"


# Print out some initial information
echo -e "\nsubmit jobs and wait unitl a node is assigned to read the INPUT* files"
echo -e "ensemble run date: $startdtime UTC"

# Loop over the different parameter combinations
for background_inp in "${background_inp_values[@]}"; do
    for flare_emission in "${flare_emission_values[@]}"; do
        # Call replace_params_and_run for each combination of parameters
        replace_params_and_run "$flare_emission" "$background_inp"
    done
done

# delete line 2 and 3 form the json file (i.e. comma and empty line)
echo "Clean up $JSON_FILE file"
sed -i '2,3d' "$JSON_FILE"

# finalize copy file
echo -e "rm $COPY_FILE" >> "$COPY_FILE"
